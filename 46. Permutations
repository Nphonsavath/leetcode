import java.util.*;

class QuickStart {
   public List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> permutations = new ArrayList<>();

		backtrack(nums, 0, new ArrayList<>(), permutations);
		return permutations;
    }

	private void backtrack(int[] nums, int start, List<Integer> permutation,
 			List<List<Integer>>  permutations) {
		
		if (permutation.size() == nums.length) {
			permutations.add(permutation);
			return;
		}

		for (int i = 0; i <= permutation.size(); i++) {
			List<Integer> newPermutation = new ArrayList<>(permutation);
			newPermutation.add(i, nums[start]);
			backtrack(nums, start + 1, newPermutation, permutations);
		}
}
    public static void main(String[] args){
        QuickStart qs = new QuickStart();
        int[] nums = {1, 2, 3};
        System.out.println(qs.permute(nums));
    }
}
